// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace chatserver {
class UserRegisterMessage;
struct UserRegisterMessageDefaultTypeInternal;
extern UserRegisterMessageDefaultTypeInternal _UserRegisterMessage_default_instance_;
class UserRegisterReplyMessage;
struct UserRegisterReplyMessageDefaultTypeInternal;
extern UserRegisterReplyMessageDefaultTypeInternal _UserRegisterReplyMessage_default_instance_;
}  // namespace chatserver
PROTOBUF_NAMESPACE_OPEN
template<> ::chatserver::UserRegisterMessage* Arena::CreateMaybeMessage<::chatserver::UserRegisterMessage>(Arena*);
template<> ::chatserver::UserRegisterReplyMessage* Arena::CreateMaybeMessage<::chatserver::UserRegisterReplyMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chatserver {

// ===================================================================

class UserRegisterMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatserver.UserRegisterMessage) */ {
 public:
  inline UserRegisterMessage() : UserRegisterMessage(nullptr) {}
  ~UserRegisterMessage() override;
  explicit PROTOBUF_CONSTEXPR UserRegisterMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRegisterMessage(const UserRegisterMessage& from);
  UserRegisterMessage(UserRegisterMessage&& from) noexcept
    : UserRegisterMessage() {
    *this = ::std::move(from);
  }

  inline UserRegisterMessage& operator=(const UserRegisterMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterMessage& operator=(UserRegisterMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegisterMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegisterMessage* internal_default_instance() {
    return reinterpret_cast<const UserRegisterMessage*>(
               &_UserRegisterMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserRegisterMessage& a, UserRegisterMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegisterMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRegisterMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRegisterMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRegisterMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserRegisterMessage& from) {
    UserRegisterMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatserver.UserRegisterMessage";
  }
  protected:
  explicit UserRegisterMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kPasswdFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // required string user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // required string passwd = 2;
  bool has_passwd() const;
  private:
  bool _internal_has_passwd() const;
  public:
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // required int64 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:chatserver.UserRegisterMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    int64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class UserRegisterReplyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatserver.UserRegisterReplyMessage) */ {
 public:
  inline UserRegisterReplyMessage() : UserRegisterReplyMessage(nullptr) {}
  ~UserRegisterReplyMessage() override;
  explicit PROTOBUF_CONSTEXPR UserRegisterReplyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRegisterReplyMessage(const UserRegisterReplyMessage& from);
  UserRegisterReplyMessage(UserRegisterReplyMessage&& from) noexcept
    : UserRegisterReplyMessage() {
    *this = ::std::move(from);
  }

  inline UserRegisterReplyMessage& operator=(const UserRegisterReplyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterReplyMessage& operator=(UserRegisterReplyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegisterReplyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegisterReplyMessage* internal_default_instance() {
    return reinterpret_cast<const UserRegisterReplyMessage*>(
               &_UserRegisterReplyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRegisterReplyMessage& a, UserRegisterReplyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterReplyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegisterReplyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRegisterReplyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRegisterReplyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRegisterReplyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserRegisterReplyMessage& from) {
    UserRegisterReplyMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterReplyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatserver.UserRegisterReplyMessage";
  }
  protected:
  explicit UserRegisterReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorstrFieldNumber = 2,
    kIsValidFieldNumber = 1,
  };
  // optional string errorstr = 2;
  bool has_errorstr() const;
  private:
  bool _internal_has_errorstr() const;
  public:
  void clear_errorstr();
  const std::string& errorstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errorstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errorstr();
  PROTOBUF_NODISCARD std::string* release_errorstr();
  void set_allocated_errorstr(std::string* errorstr);
  private:
  const std::string& _internal_errorstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errorstr(const std::string& value);
  std::string* _internal_mutable_errorstr();
  public:

  // required bool is_valid = 1;
  bool has_is_valid() const;
  private:
  bool _internal_has_is_valid() const;
  public:
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chatserver.UserRegisterReplyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorstr_;
    bool is_valid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================

class UserService_Stub;

class UserService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserService() {};
 public:
  virtual ~UserService();

  typedef UserService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void UserRigster(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::chatserver::UserRegisterMessage* request,
                       ::chatserver::UserRegisterReplyMessage* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserService);
};

class UserService_Stub : public UserService {
 public:
  UserService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserService ------------------------------------------

  void UserRigster(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::chatserver::UserRegisterMessage* request,
                       ::chatserver::UserRegisterReplyMessage* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRegisterMessage

// required string user = 1;
inline bool UserRegisterMessage::_internal_has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserRegisterMessage::has_user() const {
  return _internal_has_user();
}
inline void UserRegisterMessage::clear_user() {
  _impl_.user_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserRegisterMessage::user() const {
  // @@protoc_insertion_point(field_get:chatserver.UserRegisterMessage.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRegisterMessage::set_user(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatserver.UserRegisterMessage.user)
}
inline std::string* UserRegisterMessage::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:chatserver.UserRegisterMessage.user)
  return _s;
}
inline const std::string& UserRegisterMessage::_internal_user() const {
  return _impl_.user_.Get();
}
inline void UserRegisterMessage::_internal_set_user(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRegisterMessage::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRegisterMessage::release_user() {
  // @@protoc_insertion_point(field_release:chatserver.UserRegisterMessage.user)
  if (!_internal_has_user()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserRegisterMessage::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chatserver.UserRegisterMessage.user)
}

// required string passwd = 2;
inline bool UserRegisterMessage::_internal_has_passwd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserRegisterMessage::has_passwd() const {
  return _internal_has_passwd();
}
inline void UserRegisterMessage::clear_passwd() {
  _impl_.passwd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserRegisterMessage::passwd() const {
  // @@protoc_insertion_point(field_get:chatserver.UserRegisterMessage.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRegisterMessage::set_passwd(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.passwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatserver.UserRegisterMessage.passwd)
}
inline std::string* UserRegisterMessage::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:chatserver.UserRegisterMessage.passwd)
  return _s;
}
inline const std::string& UserRegisterMessage::_internal_passwd() const {
  return _impl_.passwd_.Get();
}
inline void UserRegisterMessage::_internal_set_passwd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.passwd_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRegisterMessage::_internal_mutable_passwd() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.passwd_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRegisterMessage::release_passwd() {
  // @@protoc_insertion_point(field_release:chatserver.UserRegisterMessage.passwd)
  if (!_internal_has_passwd()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.passwd_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserRegisterMessage::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.passwd_.SetAllocated(passwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.passwd_.IsDefault()) {
    _impl_.passwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chatserver.UserRegisterMessage.passwd)
}

// required int64 timestamp = 3;
inline bool UserRegisterMessage::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserRegisterMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void UserRegisterMessage::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t UserRegisterMessage::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t UserRegisterMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:chatserver.UserRegisterMessage.timestamp)
  return _internal_timestamp();
}
inline void UserRegisterMessage::_internal_set_timestamp(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}
inline void UserRegisterMessage::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:chatserver.UserRegisterMessage.timestamp)
}

// -------------------------------------------------------------------

// UserRegisterReplyMessage

// required bool is_valid = 1;
inline bool UserRegisterReplyMessage::_internal_has_is_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserRegisterReplyMessage::has_is_valid() const {
  return _internal_has_is_valid();
}
inline void UserRegisterReplyMessage::clear_is_valid() {
  _impl_.is_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool UserRegisterReplyMessage::_internal_is_valid() const {
  return _impl_.is_valid_;
}
inline bool UserRegisterReplyMessage::is_valid() const {
  // @@protoc_insertion_point(field_get:chatserver.UserRegisterReplyMessage.is_valid)
  return _internal_is_valid();
}
inline void UserRegisterReplyMessage::_internal_set_is_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_valid_ = value;
}
inline void UserRegisterReplyMessage::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:chatserver.UserRegisterReplyMessage.is_valid)
}

// optional string errorstr = 2;
inline bool UserRegisterReplyMessage::_internal_has_errorstr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserRegisterReplyMessage::has_errorstr() const {
  return _internal_has_errorstr();
}
inline void UserRegisterReplyMessage::clear_errorstr() {
  _impl_.errorstr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserRegisterReplyMessage::errorstr() const {
  // @@protoc_insertion_point(field_get:chatserver.UserRegisterReplyMessage.errorstr)
  return _internal_errorstr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRegisterReplyMessage::set_errorstr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.errorstr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatserver.UserRegisterReplyMessage.errorstr)
}
inline std::string* UserRegisterReplyMessage::mutable_errorstr() {
  std::string* _s = _internal_mutable_errorstr();
  // @@protoc_insertion_point(field_mutable:chatserver.UserRegisterReplyMessage.errorstr)
  return _s;
}
inline const std::string& UserRegisterReplyMessage::_internal_errorstr() const {
  return _impl_.errorstr_.Get();
}
inline void UserRegisterReplyMessage::_internal_set_errorstr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errorstr_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRegisterReplyMessage::_internal_mutable_errorstr() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errorstr_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRegisterReplyMessage::release_errorstr() {
  // @@protoc_insertion_point(field_release:chatserver.UserRegisterReplyMessage.errorstr)
  if (!_internal_has_errorstr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.errorstr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errorstr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserRegisterReplyMessage::set_allocated_errorstr(std::string* errorstr) {
  if (errorstr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errorstr_.SetAllocated(errorstr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errorstr_.IsDefault()) {
    _impl_.errorstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chatserver.UserRegisterReplyMessage.errorstr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chatserver

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
